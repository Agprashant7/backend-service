{"ast":null,"code":"import { Task } from 'src/app/model/task';\nimport { IN_PROGRESS, COMPLETED, BLOCKED } from 'src/app/helpers/statusConstants';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/crud/crud.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nconst _c0 = function (a0) {\n  return {\n    \"color\": a0\n  };\n};\nfunction TaskmanageComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 3)(2, \"div\", 4)(3, \"div\", 5)(4, \"h5\", 6);\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"uppercase\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"h6\", 7);\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"h6\", 7);\n    i0.ɵɵtext(11);\n    i0.ɵɵpipe(12, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"p\", 8);\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"label\");\n    i0.ɵɵtext(16, \" Comment\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"form\", 9)(18, \"div\", 10)(19, \"textarea\", 11);\n    i0.ɵɵtext(20, \"                      \\n                        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"label\", 12);\n    i0.ɵɵtext(22);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(23, \"p\", 13);\n    i0.ɵɵtext(24);\n    i0.ɵɵpipe(25, \"date\");\n    i0.ɵɵpipe(26, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function TaskmanageComponent_div_2_Template_button_click_27_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const task_r1 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.updateComment(task_r1));\n    });\n    i0.ɵɵtext(28);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(29, \"div\", 15)(30, \"button\", 16);\n    i0.ɵɵtext(31, \" Update Status \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(32, \"ul\", 17)(33, \"li\")(34, \"a\", 18);\n    i0.ɵɵlistener(\"click\", function TaskmanageComponent_div_2_Template_a_click_34_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const task_r1 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.updateStatus(task_r1, \"In Progress\"));\n    });\n    i0.ɵɵtext(35);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(36, \"li\")(37, \"a\", 18);\n    i0.ɵɵlistener(\"click\", function TaskmanageComponent_div_2_Template_a_click_37_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const task_r1 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateStatus(task_r1, \"Completed\"));\n    });\n    i0.ɵɵtext(38);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(39, \"li\")(40, \"a\", 18);\n    i0.ɵɵlistener(\"click\", function TaskmanageComponent_div_2_Template_a_click_40_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const task_r1 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.updateStatus(task_r1, \"Blocked\"));\n    });\n    i0.ɵɵtext(41);\n    i0.ɵɵelementEnd()()()()()()();\n  }\n  if (rf & 2) {\n    const task_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 14, task_r1.taskName));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(9, 16, task_r1.date));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Due On \", i0.ɵɵpipeBind1(12, 18, task_r1.dueDate), \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(26, _c0, ctx_r0.getFontColor(task_r1.status)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Status :\", task_r1.status, \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.commentForm);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", task_r1.comment, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"Last Modified: \", i0.ɵɵpipeBind2(25, 20, task_r1.lastModified, \"shortTime\"), \" \", i0.ɵɵpipeBind2(26, 23, task_r1.lastModified, \"MMM dd\"), \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.commentForm.invalid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r1.comment ? \"Update Comment\" : \"Add Comment\", \" \");\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(\"In Progress\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(\"Completed\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(\"Blocked\");\n  }\n}\nexport class TaskmanageComponent {\n  // constArr:any[]=[COMPLETED,BLOCKED,IN_PROGRESS]\n  constructor(crudService) {\n    // console.log(this.constArr)\n    this.crudService = crudService;\n    this.taskArr = [];\n    this.taskObj = new Task();\n  }\n  ngOnInit() {\n    this.getAllTask();\n    this.commentForm = new FormGroup({\n      comment: new FormControl('', [Validators.required])\n    });\n  }\n  call(task) {\n    this.taskComment = task.comment;\n  }\n  getAllTask() {\n    this.crudService.getAllTask().subscribe(res => {\n      this.taskArr = res.data;\n    }, err => {\n      alert(\"UNABLE TO GET LIST\");\n    });\n  }\n  updateStatus(task, status) {\n    this.taskObj = task;\n    this.taskObj.status = status;\n    this.taskObj.lastModified = new Date();\n    this.crudService.editTask(this.taskObj).subscribe(res => {\n      this.ngOnInit();\n    }, err => {\n      alert(\"FAILDED TO UPDATE STATUS\");\n    });\n  }\n  updateComment(task) {\n    this.taskObj = task;\n    this.taskObj.comment = this.commentForm.get('comment').value, this.taskObj.lastModified = new Date();\n    console.log(\"TASK COMMENT\", this.taskObj.comment);\n    this.crudService.editTask(this.taskObj).subscribe(res => {\n      this.ngOnInit();\n    }, err => {\n      alert(\"FAILDED TO UPDATE COMMENT\");\n    });\n  }\n  getFontColor(status) {\n    2;\n    switch (status) {\n      case IN_PROGRESS:\n        return 'orange';\n      case COMPLETED:\n        return 'green';\n      case BLOCKED:\n        return 'red';\n      default:\n        return 'black';\n    }\n  }\n}\nTaskmanageComponent.ɵfac = function TaskmanageComponent_Factory(t) {\n  return new (t || TaskmanageComponent)(i0.ɵɵdirectiveInject(i1.CrudService));\n};\nTaskmanageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TaskmanageComponent,\n  selectors: [[\"app-taskmanage\"]],\n  decls: 3,\n  vars: 1,\n  consts: [[1, \"container-fluid\", \"bg-light\"], [1, \"container\", \"d-flex\", \"flex-row\", \"gap-3\", \"flex-wrap\", \"justify-content-center\"], [4, \"ngFor\", \"ngForOf\"], [1, \"card\", \"mt-4\", \"shadow\", 2, \"width\", \"100%\"], [1, \"d-flex\", \"flex-column\", \"flex-md-column\", \"flex-sm-column\", \"flex-lg-row\", \"align-items-md-center\"], [1, \"card-body\", \"col\"], [1, \"card-title\"], [1, \"card-subtitle\", \"mb-2\", \"fw-lighter\", \"text-body-secondary\"], [1, \"card-text\", 3, \"ngStyle\"], [3, \"formGroup\"], [1, \"form-floating\", \"mb-3\"], [\"formControlName\", \"comment\", \"placeholder\", \"Leave a comment here\", 1, \"form-control\", 2, \"height\", \"90px\", \"width\", \"100%\"], [\"for\", \"floatingTextarea2\"], [1, \"fw-lighter\"], [\"type\", \"button\", \"aria-expanded\", \"false\", 1, \"btn\", \"btn-info\", 3, \"disabled\", \"click\"], [1, \"dropdown\", \"col\", \"align-self-flex-center\"], [\"type\", \"button\", \"data-bs-toggle\", \"dropdown\", \"aria-expanded\", \"false\", 1, \"btn\", \"btn-link\", \"dropdown-toggle\"], [1, \"dropdown-menu\", \"dropdown-menu\"], [1, \"dropdown-item\", 3, \"click\"]],\n  template: function TaskmanageComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵtemplate(2, TaskmanageComponent_div_2_Template, 42, 28, \"div\", 2);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.taskArr);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgStyle, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i2.UpperCasePipe, i2.DatePipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Task","IN_PROGRESS","COMPLETED","BLOCKED","FormGroup","FormControl","Validators","i0","TaskmanageComponent","constructor","crudService","ngOnInit","getAllTask","commentForm","comment","required","call","task","taskComment","subscribe","res","taskArr","data","err","alert","updateStatus","status","taskObj","lastModified","Date","editTask","updateComment","get","value","console","log","getFontColor","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["E:\\Prashant Ganiger\\Portfolio\\Task-Management-Angualr\\src\\app\\component\\manage\\taskmanage\\taskmanage.component.ts","E:\\Prashant Ganiger\\Portfolio\\Task-Management-Angualr\\src\\app\\component\\manage\\taskmanage\\taskmanage.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Task } from 'src/app/model/task';\r\nimport { CrudService } from 'src/app/service/crud/crud.service';\r\nimport { IN_PROGRESS,COMPLETED,BLOCKED } from 'src/app/helpers/statusConstants';\r\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\r\n@Component({\r\n  selector: 'app-taskmanage',\r\n  templateUrl: './taskmanage.component.html',\r\n  styleUrls: ['./taskmanage.component.css']\r\n})\r\nexport class TaskmanageComponent {\r\n  taskArr:Task[]=[]\r\n  taskObj=new Task();\r\n  taskComment!:string;\r\n  public commentForm!: FormGroup;\r\n  // constArr:any[]=[COMPLETED,BLOCKED,IN_PROGRESS]\r\n  constructor(private crudService:CrudService){\r\n    // console.log(this.constArr)\r\n\r\n  }\r\n  ngOnInit(){\r\n    this.getAllTask()\r\n    this.commentForm = new FormGroup({\r\n      comment: new FormControl('',[Validators.required,]),\r\n  });\r\n  }\r\n\r\n  call(task:Task){\r\n    this.taskComment=task.comment\r\n  }\r\n\r\n  getAllTask(){\r\n    this.crudService.getAllTask().subscribe(res=>{\r\n      this.taskArr=res.data;\r\n    },err=>{\r\n      alert(\"UNABLE TO GET LIST\")\r\n    })\r\n  }\r\n\r\n  updateStatus(task:Task,status:string){\r\n    this.taskObj=task;\r\n    this.taskObj.status=status\r\n    this.taskObj.lastModified=new Date()\r\n    this.crudService.editTask(this.taskObj).subscribe(res=>{\r\n      this.ngOnInit();\r\n    },err=>{\r\n      alert(\"FAILDED TO UPDATE STATUS\")\r\n    })\r\n  }\r\n\r\n  updateComment(task:Task){\r\n    this.taskObj=task;\r\n    this.taskObj.comment=this.commentForm.get('comment')!.value,\r\n    this.taskObj.lastModified=new Date()\r\n    console.log(\"TASK COMMENT\",this.taskObj.comment)\r\n    this.crudService.editTask(this.taskObj).subscribe(res=>{\r\n      this.ngOnInit();\r\n    },err=>{\r\n      alert(\"FAILDED TO UPDATE COMMENT\")\r\n    })\r\n\r\n  }\r\n  getFontColor(status:string) { (2)\r\n    switch (status) {\r\n      case IN_PROGRESS:\r\n        return 'orange';\r\n      case COMPLETED:\r\n        return 'green';\r\n      case BLOCKED:\r\n        return 'red';\r\n        default:\r\n        return 'black'\r\n    }\r\n  }\r\n}\r\n","<div class=\"container-fluid bg-light\">\r\n    <div class=\" container d-flex flex-row gap-3 flex-wrap justify-content-center\" >\r\n    <div *ngFor=\"let task of taskArr;let i = index\">\r\n        <div class=\"card mt-4 shadow\"  style=\"width:100%\">\r\n            <div class=\"d-flex flex-column flex-md-column flex-sm-column flex-lg-row align-items-md-center\" > \r\n                <div class=\"card-body col\">\r\n                    <h5 class=\"card-title\">{{task.taskName|uppercase}}</h5>\r\n                    <h6 class=\"card-subtitle mb-2 fw-lighter text-body-secondary\">{{task.date| date}}</h6>\r\n                    <h6 class=\"card-subtitle mb-2 fw-lighter text-body-secondary\">Due On {{task.dueDate |date}}</h6>\r\n                    <p class=\"card-text\" [ngStyle]=\"{'color':getFontColor(task.status)}\">Status :{{task.status}}</p>\r\n                    <label > Comment</label>\r\n                    <form [formGroup]=\"commentForm\" >\r\n                    <div class=\"form-floating mb-3\">\r\n                        <textarea class=\"form-control\" formControlName=\"comment\" placeholder=\"Leave a comment here\"  style=\"height: 90px;width: 100%;\">\r\n                      \r\n                        </textarea>\r\n                        <label for=\"floatingTextarea2\">  {{task.comment}}</label>\r\n                      </div>\r\n                      <p class=\"fw-lighter \">Last Modified: {{task.lastModified| date:'shortTime'}}  {{task.lastModified| date:'MMM dd'}} </p>\r\n                      <button class=\"btn btn-info \" type=\"button\" [disabled]=\"commentForm.invalid\" (click)=\"updateComment(task)\" aria-expanded=\"false\">\r\n                       {{task.comment?'Update Comment':'Add Comment'}}\r\n                      </button>\r\n                    </form>\r\n                    <!-- <a href=\"#\" class=\"card-link\">Card link</a>\r\n                    <a href=\"#\" class=\"card-link\">Another link</a> -->\r\n                  </div>\r\n                  <div class=\"dropdown col align-self-flex-center\">\r\n                    <button class=\"btn btn-link dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                      Update Status\r\n                    </button>\r\n                    <ul class=\"dropdown-menu dropdown-menu\" >\r\n                    <li><a class=\"dropdown-item\" (click)=\"updateStatus(task,'In Progress')\">{{\"In Progress\"}}</a></li>\r\n                    <li><a class=\"dropdown-item \" (click)=\"updateStatus(task,'Completed')\">{{\"Completed\"}}</a></li>\r\n                    <li><a class=\"dropdown-item \" (click)=\"updateStatus(task,'Blocked')\">{{\"Blocked\"}}</a></li>\r\n                    </ul>\r\n                  </div>\r\n            </div>\r\n           \r\n          </div>\r\n       \r\n    </div>\r\n    \r\n</div>\r\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}