{"ast":null,"code":"import { Task } from 'src/app/model/task';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/crud/crud.service\";\nimport * as i2 from \"src/app/service/auth/auth.sevice\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"./todocard/todocard.component\";\nfunction DashboardComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function DashboardComponent_div_18_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.addTask());\n    });\n    i0.ɵɵtext(2, \"Add\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", true);\n  }\n}\nfunction DashboardComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function DashboardComponent_div_19_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.addTask());\n    });\n    i0.ɵɵtext(2, \"Add\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", false);\n  }\n}\nexport class DashboardComponent {\n  constructor(crudService, authService) {\n    this.crudService = crudService;\n    this.authService = authService;\n    this.taskObj = new Task();\n    this.taskArr = [];\n    this.addTaskValue = '';\n    this.editTaskValue = '';\n  }\n  ngOnInit() {\n    this.taskObj = new Task();\n    // this.taskArr=[];\n    this.getAllTask();\n    this.editTaskValue = '';\n  }\n  getAllTask() {\n    this.crudService.getAllTask().subscribe(res => {\n      this.taskArr = res;\n    }, err => {\n      alert(\"UNABLE TO GET LIST\");\n    });\n  }\n  addTask() {\n    this.taskObj.taskName = this.addTaskValue;\n    this.taskObj.dueDate = this.addDueDate;\n    this.crudService.addTasks(this.taskObj).subscribe(res => {\n      this.ngOnInit();\n      this.addTaskValue = '';\n      this.addDueDate;\n    }, err => {\n      alert(err);\n    });\n  }\n  editTask(taskObj) {\n    console.log(\"*************\", taskObj);\n    // this.taskObj.task_name=this.editTaskValue\n    this.crudService.editTask(taskObj).subscribe(res => {\n      console.log(res);\n      this.ngOnInit();\n    }, err => {\n      alert(\"FAILDED TO EDIT\");\n    });\n  }\n  deleteTask(task) {\n    this.taskObj = task;\n    // console.log(task)\n    this.crudService.deleteTask(this.taskObj).subscribe(res => {\n      this.ngOnInit();\n    }, err => {\n      alert(\"FAILDED TO Delete\");\n    });\n  }\n}\nDashboardComponent.ɵfac = function DashboardComponent_Factory(t) {\n  return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.CrudService), i0.ɵɵdirectiveInject(i2.AuthService));\n};\nDashboardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DashboardComponent,\n  selectors: [[\"app-dashboard\"]],\n  decls: 22,\n  vars: 5,\n  consts: [[1, \"container-fluid\", \"bg-light\"], [1, \"container\", \"bg-light\"], [1, \"row\", \"mt-4\", 2, \"height\", \"500px\"], [1, \"col\"], [1, \"col-md-6\", \"bg-white\", \"shadow\"], [1, \"card\", \"bg-warning\", \"mt-4\"], [1, \"text-white\", \"ps-3\", \"pt-2\", \"pb-2\"], [1, \"shadow\", \"mt-2\"], [1, \"input-group\", \"flex-column\", \"p-4\", \"gap-2\"], [\"type\", \"text\", \"placeholder\", \"Enter Task\", \"name\", \"task\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"date\", \"placeholder\", \"Enter Due Date\", \"name\", \"dueDate\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"class\", \"text-center mt-4\", 4, \"ngIf\"], [3, \"taskArray\", \"deleteObj\", \"editObj\"], [1, \"text-center\", \"mt-4\"], [\"type\", \"button\", 1, \"btn\", \"btn-success\", 3, \"disabled\", \"click\"]],\n  template: function DashboardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵelement(3, \"div\", 3);\n      i0.ɵɵelementStart(4, \"div\", 4)(5, \"div\", 5)(6, \"h4\", 6);\n      i0.ɵɵtext(7, \" Task Creation \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"div\", 7)(9, \"div\", 8)(10, \"div\")(11, \"label\");\n      i0.ɵɵtext(12, \"Task Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"input\", 9);\n      i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_input_ngModelChange_13_listener($event) {\n        return ctx.addTaskValue = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(14, \"div\")(15, \"label\");\n      i0.ɵɵtext(16, \"Due Date\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"input\", 10);\n      i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_input_ngModelChange_17_listener($event) {\n        return ctx.addDueDate = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(18, DashboardComponent_div_18_Template, 3, 1, \"div\", 11);\n      i0.ɵɵtemplate(19, DashboardComponent_div_19_Template, 3, 1, \"div\", 11);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(20, \"app-todocard\", 12);\n      i0.ɵɵlistener(\"deleteObj\", function DashboardComponent_Template_app_todocard_deleteObj_20_listener($event) {\n        return ctx.deleteTask($event);\n      })(\"editObj\", function DashboardComponent_Template_app_todocard_editObj_20_listener($event) {\n        return ctx.editTask($event);\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(21, \"div\", 3);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(13);\n      i0.ɵɵproperty(\"ngModel\", ctx.addTaskValue);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.addDueDate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.addDueDate && !ctx.addTaskValue);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.addDueDate && ctx.addTaskValue);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"taskArray\", ctx.taskArr);\n    }\n  },\n  dependencies: [i3.NgIf, i4.DefaultValueAccessor, i4.NgControlStatus, i4.RequiredValidator, i4.NgModel, i5.TodoCardCompnent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Task","i0","DashboardComponent","constructor","crudService","authService","ngOnInit","taskObj","getAllTask","editTaskValue","subscribe","res","taskArr","err","alert","addTask","taskName","addTaskValue","dueDate","addDueDate","addTasks","editTask","console","log","deleteTask","task","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["E:\\Prashant Ganiger\\Portfolio\\Task-Management-Angualr\\src\\app\\component\\dashboard\\dashboard.component.ts","E:\\Prashant Ganiger\\Portfolio\\Task-Management-Angualr\\src\\app\\component\\dashboard\\dashboard.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Task } from 'src/app/model/task';\r\nimport { AuthService } from 'src/app/service/auth/auth.sevice';\r\nimport { CrudService } from 'src/app/service/crud/crud.service';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.css']\r\n})\r\nexport class DashboardComponent implements OnInit{\r\n  taskObj:Task=new Task();\r\n  taskArr:Task[]=[]\r\n  addTaskValue:string='';\r\n  addDueDate!:Date;\r\n  editTaskValue:string='';\r\n\r\n  constructor(private crudService:CrudService,private authService:AuthService){\r\n \r\n  }\r\n\r\n  ngOnInit():void{\r\n    this.taskObj=new Task();\r\n    // this.taskArr=[];\r\n    this.getAllTask();\r\n    this.editTaskValue=''\r\n  }\r\n\r\n  getAllTask(){\r\n    this.crudService.getAllTask().subscribe(res=>{\r\n      this.taskArr=res;\r\n    },err=>{\r\n      alert(\"UNABLE TO GET LIST\")\r\n    })\r\n  }\r\n  addTask(){\r\n    this.taskObj.taskName=this.addTaskValue;\r\n    this.taskObj.dueDate=this.addDueDate;\r\n    this.crudService.addTasks(this.taskObj).subscribe(res=>{\r\n       this.ngOnInit();\r\n      this.addTaskValue=''\r\n      this.addDueDate\r\n    },err=>{\r\n      alert(err)\r\n    })\r\n\r\n  }\r\n\r\n  editTask(taskObj:Task){\r\n    console.log(\"*************\",taskObj)\r\n    // this.taskObj.task_name=this.editTaskValue\r\n    this.crudService.editTask(taskObj).subscribe(res=>{\r\n      console.log(res)\r\n      this.ngOnInit();\r\n    },err=>{\r\n      alert(\"FAILDED TO EDIT\")\r\n    })\r\n  }\r\n\r\n  deleteTask(task:Task){\r\n    this.taskObj=task\r\n    // console.log(task)\r\n    this.crudService.deleteTask(this.taskObj).subscribe(res=>{\r\n      this.ngOnInit();\r\n    },err=>{\r\n      alert(\"FAILDED TO Delete\")\r\n    })\r\n  }\r\n\r\n  // call(etask:Task){\r\n  //   this.taskObj=etask\r\n  //   this.editTaskValue=etask.task_name\r\n  // }\r\n\r\n \r\n}\r\n","<div class=\"container-fluid bg-light\">\r\n    <div class=\"container bg-light\">\r\n\r\n        <div class=\"row mt-4\" style=\"height: 500px;\">\r\n            <div class=\"col\"></div>\r\n            <div class=\"col-md-6 bg-white shadow\">\r\n                <div class=\"card bg-warning mt-4\">\r\n                    <h4 class=\"text-white ps-3 pt-2 pb-2\">\r\n                       Task Creation\r\n                    </h4>\r\n                </div>\r\n                <div class=\"shadow mt-2\">\r\n                    <div class=\"input-group flex-column p-4 gap-2\">\r\n                        <div>\r\n                            <label>Task Name</label>\r\n                            <input type=\"text\" class=\"form-control\" placeholder=\"Enter Task\" name=\"task\" [(ngModel)]='addTaskValue' required=\"\">\r\n                        </div>\r\n                        <div>\r\n                            <label>Due Date</label>\r\n                            <input type=\"date\" class=\"form-control\" placeholder=\"Enter Due Date\" name=\"dueDate\" [(ngModel)]='addDueDate' required=\"\">\r\n                        </div>\r\n                       <div class=\"text-center mt-4\" *ngIf=\"!addDueDate && !addTaskValue\">\r\n                        <button class=\"btn btn-success \" type=\"button\" [disabled]=\"true\"  (click)=\"addTask()\">Add</button>\r\n                    </div>\r\n                    <div class=\"text-center mt-4\" *ngIf=\"addDueDate && addTaskValue\">\r\n                        <button class=\"btn btn-success \" type=\"button\" [disabled]=\"false\"  (click)=\"addTask()\">Add</button>\r\n                    </div>\r\n                      </div>\r\n                </div>\r\n                <!-- <p>{{taskArr|json}}</p> -->\r\n\r\n                <app-todocard [taskArray]=\"taskArr\" (deleteObj)=\"deleteTask($event)\" (editObj)=\"editTask($event)\" ></app-todocard>\r\n              </div>\r\n             \r\n            <div class=\"col\"></div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}