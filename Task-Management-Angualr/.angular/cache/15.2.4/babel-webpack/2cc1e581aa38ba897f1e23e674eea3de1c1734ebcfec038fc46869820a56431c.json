{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/service/auth/auth.sevice\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../../service/common/toaster.service\";\nimport * as i5 from \"@angular/common\";\nfunction LoginComponent_div_9_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Enter Valid Email \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtemplate(1, LoginComponent_div_9_div_1_Template, 2, 0, \"div\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.loginForm.controls[\"email\"]);\n  }\n}\nfunction LoginComponent_div_14_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Password is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtemplate(1, LoginComponent_div_14_div_1_Template, 2, 0, \"div\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loginForm.controls[\"password\"]);\n  }\n}\nfunction LoginComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.errorMessage, \" \");\n  }\n}\nexport class LoginComponent {\n  constructor(fb, authService, router, toaster) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.toaster = toaster;\n    this.errorMessage = '';\n    // this.myForm();\n  }\n\n  showToaster(type, message, title) {\n    this.toast = {\n      message: message,\n      title: title,\n      type: type,\n      ic: {\n        timeOut: 2500,\n        closeButton: true\n      }\n    };\n    this.toaster.showToast(this.toast);\n  }\n  ngOnInit() {\n    this.loginForm = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required, Validators.minLength(4)])\n    });\n    localStorage.clear();\n  }\n  // myForm() {\n  //     this.loginForm = this.fb.group({\n  //     email: ['', [ Validators.required,Validators.email] ],\n  //     password: ['', Validators.required ,Validators.minLength(4)],\n  //     });\n  //  }\n  onSubmit() {\n    const email = this.loginForm.get('email').value;\n    const password = this.loginForm.get('password').value;\n    const data = {\n      email,\n      password\n    };\n    this.authService.login(data).subscribe(res => {\n      console.log(\"RESPONSE\", res.headers.get('token'));\n      //  console.log(\"RESPONSE\",res.headers.get('auth'))\n      localStorage.setItem('token', res.headers.get('token'));\n      this.authService.isLoggedIn();\n      this.showToaster('success', res.body.message, 'Success');\n      this.router.navigate(['/home']);\n    }, err => {\n      console.log(\"ERROR WHILE LOGGIN\", err.error.message);\n      this.errorMessage = err.error.message;\n      this.showToaster('error', err.error.message, 'Error');\n      //   alert(err)\n    });\n    // this.redirect()\n  }\n}\n\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.ToasterService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 23,\n  vars: 5,\n  consts: [[1, \"container\", \"d-flex\", \"flex-column\", \"justify-content-center\", \"align-items-center\"], [1, \"shadow\", \"col-md-6\", \"my-auto\", \"p-4\"], [1, \"h1\", \"text-center\", \"mb-2\"], [3, \"formGroup\"], [1, \"form-floating\", \"mb-3\"], [\"type\", \"email\", \"id\", \"floatingInput\", \"formControlName\", \"email\", \"placeholder\", \"name@example.com\", 1, \"form-control\"], [\"for\", \"floatingInput\"], [\"class\", \"text-danger mt-3\", 4, \"ngIf\"], [\"type\", \"password\", \"id\", \"floatingPassword\", \"formControlName\", \"password\", \"placeholder\", \"Password\", 1, \"form-control\"], [\"for\", \"floatingPassword\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"flex-column\", \"d-flex\", \"align-items-center\", \"justify-content-center\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"disabled\", \"click\"], [\"routerLink\", \"/signup\"], [1, \"text-danger\", \"mt-3\"], [4, \"ngIf\"], [1, \"text-danger\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"p\", 2);\n      i0.ɵɵtext(3, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"form\", 3)(5, \"div\", 4);\n      i0.ɵɵelement(6, \"input\", 5);\n      i0.ɵɵelementStart(7, \"label\", 6);\n      i0.ɵɵtext(8, \"Email address\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(9, LoginComponent_div_9_Template, 2, 1, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 4);\n      i0.ɵɵelement(11, \"input\", 8);\n      i0.ɵɵelementStart(12, \"label\", 9);\n      i0.ɵɵtext(13, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(14, LoginComponent_div_14_Template, 2, 1, \"div\", 7);\n      i0.ɵɵtemplate(15, LoginComponent_div_15_Template, 2, 1, \"div\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"div\", 11)(17, \"button\", 12);\n      i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_17_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵtext(18, \"Log In\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"p\");\n      i0.ɵɵtext(20, \" Not have a account?\");\n      i0.ɵɵelementStart(21, \"a\", 13);\n      i0.ɵɵtext(22, \"Sign Up\");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls[\"email\"].invalid && ctx.loginForm.controls[\"email\"].touched);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls[\"password\"].invalid && ctx.loginForm.controls[\"password\"].touched);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid);\n    }\n  },\n  dependencies: [i5.NgIf, i3.RouterLink, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","FormControl","Validators","i0","LoginComponent","constructor","fb","authService","router","toaster","showToaster","type","message","title","toast","ic","timeOut","closeButton","showToast","ngOnInit","loginForm","email","required","password","minLength","localStorage","clear","onSubmit","get","value","data","login","subscribe","res","console","log","headers","setItem","isLoggedIn","body","navigate","err","error","errorMessage","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["E:\\Prashant Ganiger\\Portfolio\\Task-Management-Angualr\\src\\app\\component\\login\\login.component.ts","E:\\Prashant Ganiger\\Portfolio\\Task-Management-Angualr\\src\\app\\component\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit, } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\r\nimport { AuthService } from 'src/app/service/auth/auth.sevice';\r\nimport { Router } from '@angular/router';\r\nimport { ToasterService, toastPayload } from '../../service/common/toaster.service';\r\nimport { IndividualConfig } from 'ngx-toastr';\r\n@Component({\r\n    selector:'app-login',\r\n    templateUrl:'./login.component.html',\r\n    styleUrls: ['./login.component.css']\r\n})\r\n\r\nexport class LoginComponent {\r\n\r\n    public loginForm!: FormGroup;\r\n    errorMessage=''\r\n    toast!: toastPayload;\r\n    constructor(private fb: FormBuilder,private authService:AuthService, \r\n        private router: Router,private toaster: ToasterService){\r\n        // this.myForm();\r\n    }\r\n    showToaster(type: string,message:string,title:string) {\r\n        this.toast = {\r\n          message: message,\r\n          title:title,\r\n          type: type,\r\n          ic: {\r\n            timeOut: 2500,\r\n            closeButton: true,\r\n          } as IndividualConfig,\r\n        };\r\n        this.toaster.showToast(this.toast);\r\n      }\r\n\r\n    ngOnInit(): void {\r\n        this.loginForm = new FormGroup({\r\n            email: new FormControl('',[Validators.required, Validators.email]),\r\n            password: new FormControl('', [Validators.required, Validators.minLength(4)]),\r\n        });\r\n        localStorage.clear()\r\n    }\r\n    \r\n    // myForm() {\r\n    //     this.loginForm = this.fb.group({\r\n    //     email: ['', [ Validators.required,Validators.email] ],\r\n    //     password: ['', Validators.required ,Validators.minLength(4)],\r\n    //     });\r\n    //  }\r\n    onSubmit() {\r\n        const email=this.loginForm.get('email')!.value\r\n        const password= this.loginForm.get('password')!.value\r\n        const data={ email,password }\r\n        this.authService.login(data).subscribe((res:any)=>{\r\n         console.log(\"RESPONSE\",res.headers.get('token'))\r\n        //  console.log(\"RESPONSE\",res.headers.get('auth'))\r\n         localStorage.setItem('token',res.headers.get('token'));\r\n         this.authService.isLoggedIn()\r\n         this.showToaster('success',res.body.message,'Success')\r\n         this.router.navigate(['/home'])\r\n        },err=>{\r\n            console.log(\"ERROR WHILE LOGGIN\",err.error.message)\r\n            this.errorMessage=err.error.message\r\n            this.showToaster('error',err.error.message,'Error')\r\n    //   alert(err)\r\n    });\r\n   \r\n    // this.redirect()\r\n      }\r\n}","\r\n<div class=\"container d-flex flex-column justify-content-center align-items-center\" >\r\n  \r\n    <div class=\"shadow col-md-6 my-auto p-4 \">\r\n      <p class=\"h1 text-center mb-2\">Login</p>\r\n        <form [formGroup]=\"loginForm\" >\r\n        <div class=\"form-floating mb-3 \">\r\n            <input type=\"email\" class=\"form-control\" id=\"floatingInput\" formControlName=\"email\" placeholder=\"name@example.com\">\r\n            <label for=\"floatingInput\">Email address</label>\r\n            <div *ngIf=\"loginForm.controls['email'].invalid &&loginForm.controls['email'].touched \" class=\"text-danger mt-3\">\r\n                <div *ngIf=\"loginForm.controls['email']\">\r\n                Enter Valid Email\r\n              </div>\r\n              </div>\r\n          </div>\r\n          <div class=\" form-floating mb-3 \">\r\n            <input type=\"password\" class=\"form-control\" id=\"floatingPassword\" formControlName=\"password\"placeholder=\"Password\">\r\n            <label for=\"floatingPassword\">Password</label>\r\n            <div *ngIf=\"loginForm.controls['password'].invalid && loginForm.controls['password'].touched\" class=\"text-danger mt-3\">\r\n                <div *ngIf=\"loginForm.controls['password']\">\r\n                Password is required.\r\n              </div>\r\n              </div>\r\n              <div *ngIf=\"errorMessage\" class=\"text-danger\">\r\n                {{errorMessage}}\r\n              </div>\r\n          </div>\r\n          <div class=\"flex-column d-flex align-items-center justify-content-center \">\r\n            <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"loginForm.invalid\" (click)=\"onSubmit()\" >Log In</button>\r\n            <p> Not have a account?<a  routerLink=\"/signup\" >Sign Up</a></p>\r\n          </div>\r\n          <!-- <p>{{loginForm.value|json}}</p> -->\r\n      </form>\r\n    </div>\r\n  \r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}