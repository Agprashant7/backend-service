{"ast":null,"code":"import { Task } from 'src/app/model/task';\nimport { IN_PROGRESS, COMPLETED, BLOCKED } from 'src/app/helpers/statusConstants';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/crud/crud.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nconst _c0 = function (a0) {\n  return {\n    \"color\": a0\n  };\n};\nfunction TaskmanageComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 3)(2, \"div\", 4)(3, \"div\", 5)(4, \"h5\", 6);\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"uppercase\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"h6\", 7);\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"h6\", 7);\n    i0.ɵɵtext(11);\n    i0.ɵɵpipe(12, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"p\", 8);\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"label\");\n    i0.ɵɵtext(16, \" Comment\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"form\", 9)(18, \"div\", 10)(19, \"textarea\", 11);\n    i0.ɵɵtext(20, \"                      \\n                        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"label\", 12);\n    i0.ɵɵtext(22);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(23, \"p\", 13);\n    i0.ɵɵtext(24);\n    i0.ɵɵpipe(25, \"date\");\n    i0.ɵɵpipe(26, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function TaskmanageComponent_div_2_Template_button_click_27_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const task_r1 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.updateComment(task_r1));\n    });\n    i0.ɵɵtext(28);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(29, \"div\", 15)(30, \"button\", 16);\n    i0.ɵɵtext(31, \" Update Status \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(32, \"ul\", 17)(33, \"li\")(34, \"a\", 18);\n    i0.ɵɵlistener(\"click\", function TaskmanageComponent_div_2_Template_a_click_34_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const task_r1 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.updateStatus(task_r1, \"In Progress\"));\n    });\n    i0.ɵɵtext(35);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(36, \"li\")(37, \"a\", 18);\n    i0.ɵɵlistener(\"click\", function TaskmanageComponent_div_2_Template_a_click_37_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const task_r1 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateStatus(task_r1, \"Completed\"));\n    });\n    i0.ɵɵtext(38);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(39, \"li\")(40, \"a\", 18);\n    i0.ɵɵlistener(\"click\", function TaskmanageComponent_div_2_Template_a_click_40_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const task_r1 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.updateStatus(task_r1, \"Blocked\"));\n    });\n    i0.ɵɵtext(41);\n    i0.ɵɵelementEnd()()()()()()();\n  }\n  if (rf & 2) {\n    const task_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 14, task_r1.taskName));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(9, 16, task_r1.date));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Due On \", i0.ɵɵpipeBind1(12, 18, task_r1.dueDate), \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(26, _c0, ctx_r0.getFontColor(task_r1.status)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Status :\", task_r1.status, \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.commentForm);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", task_r1.comment, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"Last Modified: \", i0.ɵɵpipeBind2(25, 20, task_r1.lastModified, \"shortTime\"), \" \", i0.ɵɵpipeBind2(26, 23, task_r1.lastModified, \"MMM dd\"), \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.commentForm.invalid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r1.comment ? \"Update Comment\" : \"Add Comment\", \" \");\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(\"In Progress\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(\"Completed\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(\"Blocked\");\n  }\n}\nexport let TaskmanageComponent = /*#__PURE__*/(() => {\n  class TaskmanageComponent {\n    // constArr:any[]=[COMPLETED,BLOCKED,IN_PROGRESS]\n    constructor(crudService) {\n      // console.log(this.constArr)\n      this.crudService = crudService;\n      this.taskArr = [];\n      this.taskObj = new Task();\n    }\n    ngOnInit() {\n      this.getAllTask();\n      this.commentForm = new FormGroup({\n        comment: new FormControl('', [Validators.required])\n      });\n    }\n    call(task) {\n      this.taskComment = task.comment;\n    }\n    getAllTask() {\n      this.crudService.getAllTask().subscribe(res => {\n        this.taskArr = res.data;\n      }, err => {\n        alert(\"UNABLE TO GET LIST\");\n      });\n    }\n    updateStatus(task, status) {\n      this.taskObj = task;\n      this.taskObj.status = status;\n      this.taskObj.lastModified = new Date();\n      this.crudService.editTask(this.taskObj).subscribe(res => {\n        this.ngOnInit();\n      }, err => {\n        alert(\"FAILDED TO UPDATE STATUS\");\n      });\n    }\n    updateComment(task) {\n      this.taskObj = task;\n      this.taskObj.comment = this.commentForm.get('comment').value, this.taskObj.lastModified = new Date();\n      console.log(\"TASK COMMENT\", this.taskObj.comment);\n      this.crudService.editTask(this.taskObj).subscribe(res => {\n        this.ngOnInit();\n      }, err => {\n        alert(\"FAILDED TO UPDATE COMMENT\");\n      });\n    }\n    getFontColor(status) {\n      2;\n      switch (status) {\n        case IN_PROGRESS:\n          return 'orange';\n        case COMPLETED:\n          return 'green';\n        case BLOCKED:\n          return 'red';\n        default:\n          return 'black';\n      }\n    }\n  }\n  TaskmanageComponent.ɵfac = function TaskmanageComponent_Factory(t) {\n    return new (t || TaskmanageComponent)(i0.ɵɵdirectiveInject(i1.CrudService));\n  };\n  TaskmanageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TaskmanageComponent,\n    selectors: [[\"app-taskmanage\"]],\n    decls: 3,\n    vars: 1,\n    consts: [[1, \"container-fluid\", \"bg-light\"], [1, \"container\", \"d-flex\", \"flex-row\", \"gap-3\", \"flex-wrap\", \"justify-content-center\"], [4, \"ngFor\", \"ngForOf\"], [1, \"card\", \"mt-4\", \"shadow\", 2, \"width\", \"100%\"], [1, \"d-flex\", \"flex-column\", \"flex-md-column\", \"flex-sm-column\", \"flex-lg-row\", \"align-items-md-center\"], [1, \"card-body\", \"col\"], [1, \"card-title\"], [1, \"card-subtitle\", \"mb-2\", \"fw-lighter\", \"text-body-secondary\"], [1, \"card-text\", 3, \"ngStyle\"], [3, \"formGroup\"], [1, \"form-floating\", \"mb-3\"], [\"formControlName\", \"comment\", \"placeholder\", \"Leave a comment here\", 1, \"form-control\", 2, \"height\", \"90px\", \"width\", \"100%\"], [\"for\", \"floatingTextarea2\"], [1, \"fw-lighter\"], [\"type\", \"button\", \"aria-expanded\", \"false\", 1, \"btn\", \"btn-info\", 3, \"disabled\", \"click\"], [1, \"dropdown\", \"col\", \"align-self-flex-center\"], [\"type\", \"button\", \"data-bs-toggle\", \"dropdown\", \"aria-expanded\", \"false\", 1, \"btn\", \"btn-link\", \"dropdown-toggle\"], [1, \"dropdown-menu\", \"dropdown-menu\"], [1, \"dropdown-item\", 3, \"click\"]],\n    template: function TaskmanageComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtemplate(2, TaskmanageComponent_div_2_Template, 42, 28, \"div\", 2);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.taskArr);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgStyle, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i2.UpperCasePipe, i2.DatePipe]\n  });\n  return TaskmanageComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}